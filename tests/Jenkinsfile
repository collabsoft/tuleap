#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--tmpfs /tmp/tuleap_build:rw,noexec,nosuid --read-only'
                }
            }
            steps {
                dir ('results') {
                    deleteDir()
                }
                dir ('sources') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus.enalean.com_readonly',
                            passwordVariable: 'NPM_PASSWORD',
                            usernameVariable: 'NPM_USER'
                        ),
                        string(credentialsId: 'github-token-composer', variable: 'COMPOSER_GITHUB_AUTH')
                    ]) {
                        sh 'tools/utils/scripts/generated-files-builder.sh dev'
                    }
                }
            }
        }

        stage('Check lockfiles') {
            steps { script {
                actions = load 'sources/tests/actions.groovy'
                actions.runFilesStatusChangesDetection('.', 'lockfiles', 'package-lock.json composer.lock')
            } }
            post {
                failure {
                    dir ('sources') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage('UT PHPUnit') {
                    stages {
                        stage('UT PHPUnit PHP 7.4') {
                            steps { script { actions.runPHPUnitTests('74') } }
                        }
                    }
                    post { always { junit 'results/ut-phpunit/*/phpunit_tests_results.xml' } }
                }
                stage ('Jest') {
                    agent {
                        dockerfile {
                            dir 'sources/tools/utils/nix/'
                            filename 'build-tools.dockerfile'
                            reuseNode true
                            args '--network none --tmpfs /tmp/jest_rt:rw,noexec,nosuid'
                        }
                    }
                    steps { script { actions.runJestTests('Tuleap', '.') } }
                    post {
                        always { junit 'results/jest/test-*-results.xml' }
                    }
                }
                stage('REST') {
                    stages {
                        stage('REST PHP 7.4 MySQL 5.7') {
                            steps { script { actions.runRESTTests('mysql57', '74') } }
                        }
                    }
                    post { always { junit 'results/api-rest/*/*' } }
                }
                stage('DB Integration') {
                    stages {
                        stage('DB CentOS 7 PHP 7.4 MySQL 5.7') {
                            steps { script { actions.runDBTests('mysql57', '74') } }
                        }
                    }
                    post { always { junit 'results/db/*/db_tests.xml' } }
                }
                stage('SOAP') {
                    stages {
                        stage('SOAP PHP 7.4') { steps { script { actions.runSOAPTests('mysql57', '74') } } }
                    }
                    post { always { junit "results/soap/*/soap_tests.xml" } }
                }
                stage('Build and run CentOS 7') { steps { script { actions.runBuildAndRun('centos7') } } }
                stage('Translations') {
                    stages {
                        stage('Check .po files') {
                            steps { script {
                                actions.runFilesStatusChangesDetection('.', 'translation files', '"*.po\$"')
                            } }
                        }
                        stage('Check .tab files') {
                            steps { script {
                                sh 'sources/src/utils/analyse_language_files.pl sources/'
                            } }
                        }
                    }
                }
                stage('Code conformity') {
                    stages {
                        stage('ESLint static analysis') {
                            agent {
                                dockerfile {
                                    dir 'sources/tools/utils/nix/'
                                    filename 'build-tools.dockerfile'
                                    reuseNode true
                                    args '--network none'
                                }
                            }
                            steps { script { actions.runESLint() } }
                            post {
                                always {
                                    recordIssues enabledForFailure: true, tools: [checkStyle(id: 'checkstyle_eslint', pattern: 'results/eslint/checkstyle.xml')]
                                }
                            }
                        }
                        stage('PHP coding standards') {
                            steps {
                                script {
                                    def filesToAnalyze = '.'
                                    if (env.GIT_BRANCH != 'origin/master') {
                                        def helpers = load 'sources/tests/helpers.groovy'
                                        filesToAnalyze = helpers.getModifiedFilesSinceFirstParentOfCurrentCommit('sources/')
                                    }
                                    actions.runPHPCodingStandards(
                                        './src/vendor/bin/phpcs',
                                        './tests/phpcs/tuleap-ruleset-minimal.xml',
                                        filesToAnalyze
                                    )
                                }
                            }
                        }
                        stage('Psalm static analysis') {
                            agent {
                                docker {
                                    image 'enalean/tuleap-test-phpunit:c7-php74'
                                    reuseNode true
                                    args '--network none'
                                }
                            }
                            steps {
                                script {
                                    def filesToAnalyze = '.'
                                    if (env.GIT_BRANCH != 'origin/master') {
                                        def helpers = load 'sources/tests/helpers.groovy'
                                        filesToAnalyze = helpers.getModifiedFilesSinceFirstParentOfCurrentCommit('sources/')
                                    }
                                    actions.runPsalm('tests/psalm/psalm.xml', filesToAnalyze)
                                }
                            }
                            post {
                                always {
                                    recordIssues enabledForFailure: true, minimumSeverity: 'NORMAL', tools: [checkStyle(id: 'checkstyle_psalm', pattern: 'results/psalm/checkstyle.xml')]
                                }
                            }
                        }
                        stage('Architecture') {
                            agent {
                                docker {
                                    image 'enalean/tuleap-test-phpunit:c7-php74'
                                    reuseNode true
                                    args '--network none'
                                }
                            }
                            steps { script { actions.runDeptrac('tests/deptrac/core_on_plugins.yml', 'core_on_plugins') } }
                            post { failure { junit 'results/deptrac/*.xml' } }
                        }
                        stage('SCSS coding standards') {
                            agent {
                                dockerfile {
                                    dir 'sources/tools/utils/nix/'
                                    filename 'build-tools.dockerfile'
                                    reuseNode true
                                    args '--network none'
                                }
                            }
                            steps { script { actions.runStylelint() } }
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                }
            }
        }
    }
}
