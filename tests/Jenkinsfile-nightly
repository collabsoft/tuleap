#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--tmpfs /tmp/tuleap_build:rw,noexec,nosuid --read-only'
                }
            }
            steps {
                dir ('results') {
                    deleteDir()
                }
                dir ('sources') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus.enalean.com_readonly',
                            passwordVariable: 'NPM_PASSWORD',
                            usernameVariable: 'NPM_USER'
                        ),
                        string(credentialsId: 'github-token-composer', variable: 'COMPOSER_GITHUB_AUTH')
                    ]) {
                        sh 'tools/utils/scripts/generated-files-builder.sh dev'
                    }
                }
                script { actions = load 'sources/tests/actions.groovy' }
            }
        }

        stage('Unit tests PHP with coverage') {
            steps { script { actions.runPHPUnitTests('74', true) } }
            post { always { junit 'results/ut-phpunit/*/phpunit_tests_results.xml' } }
        }

        stage ('Unit tests JS/TS with coverage') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--network none --tmpfs /tmp/jest_rt:rw,noexec,nosuid'
                }
            }
            steps { script { actions.runJestTests('Tuleap', '.', true) } }
            post {
                always {
                    junit 'results/jest/test-*-results.xml'
                    publishCoverage adapters: [istanbulCoberturaAdapter('results/jest/coverage/cobertura-coverage.xml')], tag: 'Javascript'
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage ('PHP 8.0') {
                    stages {
                        stage('UT PHPUnit PHP 8.0') {
                            steps { script { actions.runPHPUnitTests('80') } }
                            post {
                                always {
                                    junit 'results/ut-phpunit/*/phpunit_tests_results.xml'
                                }
                            }
                        }
                    }
                }
                stage('E2E tests') {
                    options { retry(1) }
                    steps {
                        script { actions.runEndToEndTests('full') }
                        junit 'results/e2e/full/*.xml'
                    }
                }
                stage('Distributed SVN integration') {
                    options { retry(1) }
                    steps {
                        script { actions.runEndToEndTests('distlp') }
                        junit 'results/e2e/distlp/*.xml'
                    }
                }
                stage('REST') {
                    stages {
                        stage('REST PHP 7.4 MariaDB 10.3') {
                            steps { script { actions.runRESTTests('mariadb103', '74') } }
                        }
                    }
                    post { always { junit 'results/api-rest/*/rest_tests.xml' } }
                }
                stage('SOAP') {
                    stages {
                        stage('SOAP PHP 7.4 MariaDB 10.3') {
                            steps { script { actions.runSOAPTests('mariadb103', '74') } }
                        }
                    }
                    post { always { junit 'results/soap/*/soap_tests.xml' } }
                }
                stage('DB Integration') {
                    stages {
                        stage('DB PHP 7.4 MariaDB 10.3') {
                            steps { script { actions.runDBTests('mariadb103', '74') } }
                        }
                    }
                    post { always { junit 'results/db/*/db_tests.xml' } }
                }
                stage('Psalm static analysis (unused code)') {
                    agent {
                        docker {
                            image 'enalean/tuleap-test-phpunit:c7-php74'
                            reuseNode true
                            args '--network none'
                        }
                    }
                    steps {
                        script {
                            actions.runPsalmUnusedCodeDetection('tests/psalm/psalm.xml', '.')
                        }
                    }
                    post {
                        always {
                            recordIssues enabledForFailure: true, minimumSeverity: 'NORMAL', tools: [checkStyle(id: 'checkstyle_psalm', pattern: 'results/psalm/checkstyle.xml')]
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                }
                failure {
                    withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                        mail to: email,
                        subject: "${currentBuild.fullDisplayName} is broken",
                        body: "See ${env.BUILD_URL}"
                    }
                }
                unstable {
                    withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                        mail to: email,
                        subject: "${currentBuild.fullDisplayName} is unstable",
                        body: "See ${env.BUILD_URL}"
                    }
                }
            }
        }
    }
}
